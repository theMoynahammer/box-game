{"version":3,"sources":["data-structures/all-cards.js","components/TestingSocket.js","logic-functions/helperFunctions.js","logic-functions/setUpInitialBoard.js","components/Board.js","components/CurrentGameInfo.js","components/Game.js","components/Modals.js","components/Square.js","components/PlayersInGame.js","components/Multiplayer.js","pages/LandingPage.js","index.js"],"names":["module","exports","displayValue","suit","strength","imgPath","spotIsStillValid","name","TestSocket","incorrectGuessCardFormat","getRandomCardIndex","lengthOfCardsRemainingArray","Math","floor","random","formatRemainingCardsCount","cardsRemaining","cardCounts","2","3","4","5","6","7","8","9","10","J","Q","K","A","forEach","card","formattedTextArray","key","push","evaluateGuess","i","higherLowerOrSamesies","currentState","newState","cloneDeep","currentCard","currentBoard","currentCardStrength","newRandomCardIndex","length","chosenCardDetails","cardDrawn","previousCard","previousCardImageUrl","currentCardImageUrl","chosenCardStrength","newNumberOfSamesies","numberOfSamesies","guessWasCorrect","wasGuessCorrect","splice","turnNumber","cardsRemovedFromDeck","gameLost","spotsStillValid","some","item","setGameLostProperty","gameWon","spotsAreStillValid","setGameWonProperty","previousGuess","emptyBoardArray","stateFormat","playersInSession","getInitialBoardAndCardsRemaining","allCards","initialBoard","map","indexOfChosenCard","getInitialState","initialState","Board","backgroundImageNames","earth","mars","amEx","darkPattern","moon","underwater","wood","guessLower","props","guessSamesies","guessHigher","this","squares","id","style","backgroundSize","backgroundPosition","backgroundImage","process","selectedBackground","padding","className","renderSquare","React","Component","CurrentGameInfo","resetGame","cardsRemainingIcons","src","alt","display","flexDirection","Button","variant","size","onClick","window","location","reload","Game","formattedCardsRemainingList","currentStreakNumber","currentStreakType","previousOutcome","toggleModal","modalToChange","setState","state","rageQuit","prevState","rageQuits","localStorage","setItem","handleWinLossStats","gameState","clearStats","removeItem","totalLosses","totalWins","showCardsRemainingUnlocked","setBackground","console","log","handleUnlocks","handleCheatingCheckbox","event","target","checked","isThePlayerACheater","parseInt","getItem","showHelpModal","showNotesModal","showStatResetModal","Container","fluid","backgroundColor","Navbar","bg","width","height","Form","inline","NavDropdown","title","Item","to","Toggle","aria-controls","Collapse","Nav","marginRight","cursor","color","Modal","centered","show","onHide","Header","closeButton","Title","Body","Footer","Row","Col","xs","sm","Number","toLocaleString","undefined","minimumFractionDigits","marginLeft","Image","borderRadius","Check","type","onChange","label","OverlayTrigger","overlay","Tooltip","paddingTop","disabled","class","scope","handleGuessAndManageState","Modals","modalToShow","savePlayerInfo","handleChange","playerName","Fragment","backdrop","Group","controlId","Label","Control","maxLength","required","e","value","as","role","Square","position","alignItems","justifyContent","includes","PlayersInGame","person","activePlayer","correctGuesses","incorrectGuesses","ENDPOINT","connectToSocket","socket","socketIOClient","emit","gameNumber","on","response","emitToSocket","isItPlayersTurn","isItPlayersTurnFunction","stateToCompareWith","indexOfActivePlayer","findIndex","JSON","stringify","sessionId","modal","showModal","clearAllState","withoutStats","alert","uuidv4","playerInfoObject","indexOfPlayerInArray","playerInfoObjectNotActive","disconnectFromSession","bind","onbeforeunload","indexOfPlayer","lengthOfPlayersIndex","playersWhoGuessedLast","toString","textDecoration","paddingRight","playerInfoReceived","pointerEvents","LandingPageWrapper","styled","div","LandingPage","ReactDOM","render","basename","exact","path","component","Multiplayer","document","getElementById"],"mappings":"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","file":"static/js/main.3e4c9d15.chunk.js","sourcesContent":["module.exports = [\n    {\n        displayValue: '2',\n        suit: 'clubs',\n        strength: 2,\n        imgPath: process.env.PUBLIC_URL + '/card-images/2_of_clubs.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '3',\n        suit: 'clubs',\n        strength: 3,\n        imgPath: process.env.PUBLIC_URL + '/card-images/3_of_clubs.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '4',\n        suit: 'clubs',\n        strength: 4,\n        imgPath: process.env.PUBLIC_URL + '/card-images/4_of_clubs.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '5',\n        suit: 'clubs',\n        strength: 5,\n        imgPath: process.env.PUBLIC_URL + '/card-images/5_of_clubs.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '6',\n        suit: 'clubs',\n        strength: 6,\n        imgPath: process.env.PUBLIC_URL + '/card-images/6_of_clubs.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '7',\n        suit: 'clubs',\n        strength: 7,\n        imgPath: process.env.PUBLIC_URL + '/card-images/7_of_clubs.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '8',\n        suit: 'clubs',\n        strength: 8,\n        imgPath: process.env.PUBLIC_URL + '/card-images/8_of_clubs.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '9',\n        suit: 'clubs',\n        strength: 9,\n        imgPath: process.env.PUBLIC_URL + '/card-images/9_of_clubs.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '10',\n        suit: 'clubs',\n        strength: 10,\n        imgPath: process.env.PUBLIC_URL + '/card-images/10_of_clubs.svg',\n        spotIsStillValid: true,\n    },\n    {\n        name: 'Jack',\n        displayValue: 'J',\n        suit: 'clubs',\n        strength: 11,\n        imgPath: process.env.PUBLIC_URL + '/card-images/jack_of_clubs.svg',\n        spotIsStillValid: true,\n    },\n    {\n        name: 'Queen',\n        displayValue: 'Q',\n        suit: 'clubs',\n        strength: 12,\n        imgPath: process.env.PUBLIC_URL + '/card-images/queen_of_clubs.svg',\n        spotIsStillValid: true,\n    },\n    {\n        name: 'King',\n        displayValue: 'K',\n        suit: 'clubs',\n        strength: 13,\n        imgPath: process.env.PUBLIC_URL + '/card-images/king_of_clubs.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: 'A',\n        suit: 'clubs',\n        strength: 14,\n        imgPath: process.env.PUBLIC_URL + '/card-images/ace_of_clubs.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '2',\n        suit: 'spades',\n        strength: 2,\n        imgPath: process.env.PUBLIC_URL + '/card-images/2_of_spades.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '3',\n        suit: 'spades',\n        strength: 3,\n        imgPath: process.env.PUBLIC_URL + '/card-images/3_of_spades.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '4',\n        suit: 'spades',\n        strength: 4,\n        imgPath: process.env.PUBLIC_URL + '/card-images/4_of_spades.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '5',\n        suit: 'spades',\n        strength: 5,\n        imgPath: process.env.PUBLIC_URL + '/card-images/5_of_spades.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '6',\n        suit: 'spades',\n        strength: 6,\n        imgPath: process.env.PUBLIC_URL + '/card-images/6_of_spades.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '7',\n        suit: 'spades',\n        strength: 7,\n        imgPath: process.env.PUBLIC_URL + '/card-images/7_of_spades.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '8',\n        suit: 'spades',\n        strength: 8,\n        imgPath: process.env.PUBLIC_URL + '/card-images/8_of_spades.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '9',\n        suit: 'spades',\n        strength: 9,\n        imgPath: process.env.PUBLIC_URL + '/card-images/9_of_spades.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '10',\n        suit: 'spades',\n        strength: 10,\n        imgPath: process.env.PUBLIC_URL + '/card-images/10_of_spades.svg',\n        spotIsStillValid: true,\n    },\n    {\n        name: 'Jack',\n        displayValue: 'J',\n        suit: 'spades',\n        strength: 11,\n        imgPath: process.env.PUBLIC_URL + '/card-images/jack_of_spades.svg',\n        spotIsStillValid: true,\n    },\n    {\n        name: 'Queen',\n        displayValue: 'Q',\n        suit: 'spades',\n        strength: 12,\n        imgPath: process.env.PUBLIC_URL + '/card-images/queen_of_spades.svg',\n        spotIsStillValid: true,\n    },\n    {\n        name: 'King',\n        displayValue: 'K',\n        suit: 'spades',\n        strength: 13,\n        imgPath: process.env.PUBLIC_URL + '/card-images/king_of_spades.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: 'A',\n        suit: 'spades',\n        strength: 14,\n        imgPath: process.env.PUBLIC_URL + '/card-images/ace_of_spades.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '2',\n        suit: 'hearts',\n        strength: 2,\n        imgPath: process.env.PUBLIC_URL + '/card-images/2_of_hearts.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '3',\n        suit: 'hearts',\n        strength: 3,\n        imgPath: process.env.PUBLIC_URL + '/card-images/3_of_hearts.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '4',\n        suit: 'hearts',\n        strength: 4,\n        imgPath: process.env.PUBLIC_URL + '/card-images/4_of_hearts.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '5',\n        suit: 'hearts',\n        strength: 5,\n        imgPath: process.env.PUBLIC_URL + '/card-images/5_of_hearts.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '6',\n        suit: 'hearts',\n        strength: 6,\n        imgPath: process.env.PUBLIC_URL + '/card-images/6_of_hearts.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '7',\n        suit: 'hearts',\n        strength: 7,\n        imgPath: process.env.PUBLIC_URL + '/card-images/7_of_hearts.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '8',\n        suit: 'hearts',\n        strength: 8,\n        imgPath: process.env.PUBLIC_URL + '/card-images/8_of_hearts.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '9',\n        suit: 'hearts',\n        strength: 9,\n        imgPath: process.env.PUBLIC_URL + '/card-images/9_of_hearts.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '10',\n        suit: 'hearts',\n        strength: 10,\n        imgPath: process.env.PUBLIC_URL + '/card-images/10_of_hearts.svg',\n        spotIsStillValid: true,\n    },\n    {\n        name: 'Jack',\n        displayValue: 'J',\n        suit: 'hearts',\n        strength: 11,\n        imgPath: process.env.PUBLIC_URL + '/card-images/jack_of_hearts.svg',\n        spotIsStillValid: true,\n    },\n    {\n        name: 'Queen',\n        displayValue: 'Q',\n        suit: 'hearts',\n        strength: 12,\n        imgPath: process.env.PUBLIC_URL + '/card-images/queen_of_hearts.svg',\n        spotIsStillValid: true,\n    },\n    {\n        name: 'King',\n        displayValue: 'K',\n        suit: 'hearts',\n        strength: 13,\n        imgPath: process.env.PUBLIC_URL + '/card-images/king_of_hearts.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: 'A',\n        suit: 'hearts',\n        strength: 14,\n        imgPath: process.env.PUBLIC_URL + '/card-images/ace_of_hearts.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '2',\n        suit: 'diamonds',\n        strength: 2,\n        imgPath: process.env.PUBLIC_URL + '/card-images/2_of_diamonds.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '3',\n        suit: 'diamonds',\n        strength: 3,\n        imgPath: process.env.PUBLIC_URL + '/card-images/3_of_diamonds.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '4',\n        suit: 'diamonds',\n        strength: 4,\n        imgPath: process.env.PUBLIC_URL + '/card-images/4_of_diamonds.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '5',\n        suit: 'diamonds',\n        strength: 5,\n        imgPath: process.env.PUBLIC_URL + '/card-images/5_of_diamonds.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '6',\n        suit: 'diamonds',\n        strength: 6,\n        imgPath: process.env.PUBLIC_URL + '/card-images/6_of_diamonds.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '7',\n        suit: 'diamonds',\n        strength: 7,\n        imgPath: process.env.PUBLIC_URL + '/card-images/7_of_diamonds.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '8',\n        suit: 'diamonds',\n        strength: 8,\n        imgPath: process.env.PUBLIC_URL + '/card-images/8_of_diamonds.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '9',\n        suit: 'diamonds',\n        strength: 9,\n        imgPath: process.env.PUBLIC_URL + '/card-images/9_of_diamonds.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: '10',\n        suit: 'diamonds',\n        strength: 10,\n        imgPath: process.env.PUBLIC_URL + '/card-images/10_of_diamonds.svg',\n        spotIsStillValid: true,\n    },\n    {\n        name: 'Jack',\n        displayValue: 'J',\n        suit: 'diamonds',\n        strength: 11,\n        imgPath: process.env.PUBLIC_URL + '/card-images/jack_of_diamonds.svg',\n        spotIsStillValid: true,\n    },\n    {\n        name: 'Queen',\n        displayValue: 'Q',\n        suit: 'diamonds',\n        strength: 12,\n        imgPath: process.env.PUBLIC_URL + '/card-images/queen_of_diamonds.svg',\n        spotIsStillValid: true,\n    },\n    {\n        name: 'King',\n        displayValue: 'K',\n        suit: 'diamonds',\n        strength: 13,\n        imgPath: process.env.PUBLIC_URL + '/card-images/king_of_diamonds.svg',\n        spotIsStillValid: true,\n    },\n    {\n        displayValue: 'A',\n        suit: 'diamonds',\n        strength: 14,\n        imgPath: process.env.PUBLIC_URL + '/card-images/ace_of_diamonds.svg',\n        spotIsStillValid: true,\n    },\n];\n","import React, { useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://127.0.0.1:8080\";\n\nfunction TestSocket() {\n  const [response, setResponse] = useState(\"First thing\");\n\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    socket.on(\"chat message\", data => {\n      setResponse(data);\n    });\n  }, []);\n\n  return (\n    <p>\n      {response}\n    </p>\n  );\n}\n\nexport default TestSocket;\n","import cloneDeep from 'lodash/cloneDeep';\n\n\nconst incorrectGuessCardFormat = {\n    spotIsStillValid: false,\n    imgPath: process.env.PUBLIC_URL + `/cardback.jpg`\n};\n\nconst getRandomCardIndex = (lengthOfCardsRemainingArray) => Math.floor(Math.random() * lengthOfCardsRemainingArray);\n\nconst setGameLostProperty = ({currentBoard, cardsRemaining}) => {\n    const spotsStillValid = currentBoard.some(item=>item.spotIsStillValid === true);\n    if (spotsStillValid){\n        return false;\n    }\n    else if (spotsStillValid && cardsRemaining.length === 0){\n        return true;\n    }\n    else{\n        return true;\n    }\n}\nconst setGameWonProperty = ({currentBoard, cardsRemaining}) => {\n    const spotsAreStillValid = currentBoard.some(item=>item.spotIsStillValid === true)\n    if (cardsRemaining.length === 0 && spotsAreStillValid){\n        return true;\n    }\n    else{\n        return false;\n    }\n} \n\nconst wasGuessCorrect = (currentCardStrength, chosenCardStrength, higherLowerOrSamesies) =>{\n    if (higherLowerOrSamesies === 'higher'){\n        return chosenCardStrength>currentCardStrength;\n    }\n    else if (higherLowerOrSamesies === 'lower'){\n        return chosenCardStrength<currentCardStrength;\n    }\n    else if (higherLowerOrSamesies === 'samesies'){\n        return chosenCardStrength === currentCardStrength;\n    }\n}\n\nconst formatRemainingCardsCount = (cardsRemaining)=> {\n    const cardCounts= {\n        2: 0,\n        3: 0,\n        4: 0,\n        5: 0,\n        6: 0,\n        7: 0,\n        8: 0,\n        9: 0,\n        10: 0,\n        J: 0,\n        Q: 0,\n        K: 0,\n        A: 0,\n    }\n    cardsRemaining.forEach(card=> cardCounts[card.displayValue]++)\n    const formattedTextArray = [];\n    for (let key in cardCounts){\n        formattedTextArray.push(`${key} - count: ${cardCounts[key]}`);\n    }\n    return formattedTextArray;\n}\n\nconst evaluateGuess = (i, higherLowerOrSamesies, currentState) => {\n    const newState = cloneDeep(currentState);\n    const currentCard = currentState.currentBoard[i];\n    const currentCardStrength = currentCard.strength;\n    const newRandomCardIndex = getRandomCardIndex(newState.cardsRemaining.length);\n    const chosenCardDetails = newState.cardsRemaining[newRandomCardIndex];\n    const cardDrawn = `${chosenCardDetails.name ? chosenCardDetails.name : chosenCardDetails.displayValue} of ${chosenCardDetails.suit}`;\n    const previousCard = `${currentCard.name ? currentCard.name : currentCard.displayValue} of ${currentCard.suit}`;\n    const previousCardImageUrl = currentCard.imgPath;\n    const currentCardImageUrl = chosenCardDetails.imgPath;\n    const chosenCardStrength = chosenCardDetails.strength;\n    const newNumberOfSamesies = chosenCardStrength === currentCardStrength ? currentState.numberOfSamesies + 1 : currentState.numberOfSamesies;\n    // const guessWasCorrect = higherLowerOrSamesies === 'higher' ? chosenCardStrength > currentCardStrength : chosenCardStrength < currentCardStrength;\n    const guessWasCorrect = wasGuessCorrect(currentCardStrength, chosenCardStrength, higherLowerOrSamesies)\n    newState.cardsRemaining.splice(newRandomCardIndex, 1);\n    newState.turnNumber++;\n    newState.currentBoard[i] = guessWasCorrect ? chosenCardDetails : incorrectGuessCardFormat;\n    newState.cardsRemovedFromDeck.push(chosenCardDetails);\n    newState.gameLost = setGameLostProperty(newState);\n    newState.gameWon = setGameWonProperty(newState);\n    newState.numberOfSamesies = newNumberOfSamesies;\n    newState.cardDrawn = cardDrawn;\n    newState.previousCard = previousCard;\n    newState.previousGuess = higherLowerOrSamesies;\n    newState.guessWasCorrect = guessWasCorrect;\n    newState.previousCardImageUrl = previousCardImageUrl;\n    newState.currentCardImageUrl = currentCardImageUrl;\n    return {\n        newState,\n    };\n}\n\nexport {\n    evaluateGuess,\n    getRandomCardIndex,\n    formatRemainingCardsCount,\n}\n","import allCards from '../data-structures/all-cards'\nimport { getRandomCardIndex } from './helperFunctions';\nconst emptyBoardArray = [\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n];\n\nconst stateFormat = {\n    turnNumber: null,\n    cardsRemaining: null,\n    currentBoard: null,\n    cardsRemovedFromDeck: null,\n    gameWon: false,\n    gameLost: false,\n    numberOfSamesies: null,\n    cardDrawn: null,\n    previousCard: null,\n    previousGuess: null,\n    playersInSession: [],\n};\n\nconst getInitialBoardAndCardsRemaining = () => {\n    const cardsRemaining = [...allCards];\n    const initialBoard = emptyBoardArray.map((item) => {\n        const indexOfChosenCard = getRandomCardIndex(cardsRemaining.length);\n        const chosenCardDetails = cardsRemaining[indexOfChosenCard];\n        cardsRemaining.splice(indexOfChosenCard, 1);\n        return chosenCardDetails\n    });\n\n    return {\n        cardsRemaining,\n        initialBoard,\n    }\n};\n\nconst getInitialState = (cardsRemaining, initialBoard) => {\n    const initialState = { ...stateFormat };\n    initialState.turnNumber = 0;\n    initialState.cardsRemaining = cardsRemaining;\n    initialState.currentBoard = initialBoard;\n    initialState.cardsRemovedFromDeck = [...initialBoard];\n    initialState.numberOfSamesies = 0;\n    return initialState;\n}\n\nexport {\n    getInitialBoardAndCardsRemaining,\n    getInitialState\n}\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport { Square } from \"./\";\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        guessLower={() => this.props.evaluateGuess(i, \"lower\")}\n        guessSamesies={() => this.props.evaluateGuess(i, \"samesies\")}\n        guessHigher={() => this.props.evaluateGuess(i, \"higher\")}\n        imgPath={this.props.squares[i].imgPath}\n        spotIsStillValid={this.props.squares[i].spotIsStillValid}\n      />\n    );\n  }\n\n  backgroundImageNames = {\n    earth: \"earth.jpg\",\n    mars: \"mars.jpg\",\n    amEx: \"amEx.png\",\n    darkPattern: \"darkPattern.jpg\",\n    moon: \"moon.jpg\",\n    underwater: \"underwater.jpg\",\n    wood: \"woodimage.jpg\",\n  };\n\n  render() {\n    return (\n      <div\n        id=\"main-game-board\"\n        style={{\n          backgroundSize: \"cover\",\n          // backgroundRepeat: 'no-repeat',\n          backgroundPosition: \"center\",\n          backgroundImage: `url(${process.env.PUBLIC_URL}/${\n            this.backgroundImageNames[this.props.selectedBackground]\n          })`,\n          padding: \"10px 0px\",\n        }}\n      >\n        {/* <Container fluid> */}\n        {/* <Container fluid> */}\n        {/* <Row className=\"refactored-row\"> */}\n        <div className=\"board-row\">\n          {/* TODO use card-box class and center everything */}\n          <div className=\"card-square-div\">{this.renderSquare(0)}</div>\n          <div className=\"card-square-div\">{this.renderSquare(1)}</div>\n          <div className=\"card-square-div\">{this.renderSquare(2)}</div>\n          {/* </Row> */}\n        </div>\n        <div className=\"board-row\">\n          <div className=\"card-square-div\">{this.renderSquare(3)}</div>\n          <div className=\"card-square-div\">{this.renderSquare(4)}</div>\n          <div className=\"card-square-div\">{this.renderSquare(5)}</div>\n        </div>\n        <div className=\"board-row\">\n          {/* <Row className=\"refactored-row\"> */}\n          <div className=\"card-square-div\">{this.renderSquare(6)}</div>\n          <div className=\"card-square-div\">{this.renderSquare(7)}</div>\n          <div className=\"card-square-div\">{this.renderSquare(8)}</div>\n        </div>\n        {/* </Container> */}\n        {/* </Container> */}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport { GoArrowUp, GoArrowDown } from 'react-icons/go';\nimport { FaArrowLeft } from 'react-icons/fa'\n\nconst CurrentGameInfo = ({ currentState, resetGame }) => {\n    const cardsRemainingIcons = currentState.cardsRemaining.map(() =>\n        <img className=\"cards-remaining-card\" src={process.env.PUBLIC_URL + `/cardback.jpg`} alt=\"not found :(\"></img>\n    );\n\n    return (\n        <div id=\"current-game-info\">\n            <div className=\"card-remaining-icon-div\">{cardsRemainingIcons}</div>\n            {/* {currentState.playersWhoGuessedLast && <div id=\"previous-guess-info\">\n                <div id=\"players-guess\">\n                    {currentState.playersWhoGuessedLast[currentState.playersWhoGuessedLast.length - 1].playerName}'s guess\n                </div>\n                <table class=\"table table-override-cards\">\n                    <tbody>\n                        <tr className=\"guess-tr\">\n                            <td className=\"guess-td guess-td-top\">Previous</td>\n                            <td className=\"guess-td guess-td-top\">Guess</td>\n                            <td className=\"guess-td guess-td-top\">Drawn</td>\n                        </tr>\n                        <tr className=\"guess-tr\">\n                            <td className=\"guess-td\"><img className=\"card-images-guess\" src={currentState.previousCardImageUrl} /></td>\n                            <td className=\"guess-td\" style={{ ...(!currentState.guessWasCorrect && { color: 'red' }) }}>{currentState.previousGuess === 'lower' ? <GoArrowDown className=\"guess-icon\" /> : <GoArrowUp className=\"guess-icon\" />}</td>\n                            <td className=\"guess-td\"><img className=\"card-images-guess\" src={currentState.currentCardImageUrl} /></td>\n                        </tr>\n                    </tbody>\n                </table>\n\n            </div>} */}\n            <div style={{display:'flex', flexDirection: 'column'}}>\n            <Button className=\"info-div-buttons-top\" variant=\"outline-danger\" size=\"sm\" onClick={() => window.location.reload()}>Leave Session</Button>\n            <Button className=\"info-div-buttons\" variant=\"outline-danger\" size=\"sm\" onClick={() => resetGame(true)}>Remove Players</Button>\n            </div>\n        </div>\n    );\n}\n\nexport default CurrentGameInfo;\n","import React from \"react\";\n// import { v4 as uuidv4 } from 'uuid';\nimport { Link } from \"react-router-dom\";\nimport {\n  evaluateGuess,\n  formatRemainingCardsCount,\n} from \"../logic-functions/helperFunctions\";\nimport {\n  getInitialBoardAndCardsRemaining,\n  getInitialState,\n} from \"../logic-functions/setUpInitialBoard\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Form from \"react-bootstrap/Form\";\n// import FormControl from 'react-bootstrap/FormControl';\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FaQuestion, FaStickyNote } from \"react-icons/fa\";\nimport { Board } from \"./\";\nimport Image from \"react-bootstrap/Image\";\n// import Modals from './Modals';\nimport CurrentGameInfo from \"./CurrentGameInfo\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    const { cardsRemaining, initialBoard } = getInitialBoardAndCardsRemaining();\n    const initialState = getInitialState(cardsRemaining, initialBoard);\n    const rageQuits = parseInt(localStorage.getItem(\"rageQuits\")) || 0;\n    const totalWins = parseInt(localStorage.getItem(\"totalWins\")) || 0;\n    const totalLosses = parseInt(localStorage.getItem(\"totalLosses\")) || 0;\n    this.state = {\n      gameState: [initialState],\n      isThePlayerACheater: false,\n      selectedBackground:\n        localStorage.getItem(\"backgroundPreference\") || \"amEx\",\n      showHelpModal: false,\n      showNotesModal: false,\n      showStatResetModal: false,\n      rageQuits,\n      totalWins,\n      totalLosses,\n      showCardsRemainingUnlocked: totalWins >= 1 ? true : false,\n    };\n  }\n\n  previousCard = null;\n  previousGuess = null;\n  cardDrawn = null;\n  numberOfSamesies = 0;\n  formattedCardsRemainingList = null;\n  currentStreakNumber = null;\n  currentStreakType = null;\n  // rageQuits = localStorage.getItem('rageQuits') || 0;\n  // totalWins = localStorage.getItem('totalWins') || 0;\n  // totalLosses = localStorage.getItem('totalLosses') || 0;\n  previousOutcome = null;\n\n  handleGuessAndManageState(i, higherLowerOrSamesies) {\n    const currentState = {\n      ...this.state.gameState[this.state.gameState.length - 1],\n    };\n    const { newState } = evaluateGuess(i, higherLowerOrSamesies, currentState);\n    const {\n      cardDrawn,\n      previousCard,\n      numberOfSamesies,\n      previousGuess,\n      gameLost,\n      gameWon,\n      previousCardImageUrl,\n      currentCardImageUrl,\n    } = newState;\n    if (gameLost) this.handleWinLossStats(false);\n    if (gameWon) this.handleWinLossStats(true);\n    this.cardDrawn = cardDrawn;\n    this.previousCard = previousCard;\n    this.numberOfSamesies = numberOfSamesies;\n    this.previousGuess = previousGuess;\n    this.previousCardImageUrl = previousCardImageUrl;\n    this.currentCardImageUrl = currentCardImageUrl;\n    this.formattedCardsRemainingList = formatRemainingCardsCount(\n      newState.cardsRemaining\n    );\n    this.setState({\n      gameState: [...this.state.gameState, newState],\n    });\n  }\n\n  toggleModal = (modalToChange) => {\n    // Options are:\n    // - showStatResetModal\n    // - showNotesModal\n    // - showHelpModal\n    this.setState({\n      [modalToChange]: !this.state[modalToChange],\n    });\n  };\n\n  resetGame = (rageQuit = false) => {\n    if (rageQuit) {\n      // this.rageQuits++;\n      this.setState(\n        (prevState) => ({ rageQuits: prevState.rageQuits + 1 }),\n        () => {\n          localStorage.setItem(\"rageQuits\", this.state.rageQuits);\n          // this.totalLosses++;\n          this.handleWinLossStats(false);\n        }\n      );\n    }\n    this.previousGuess = null;\n    const { cardsRemaining, initialBoard } = getInitialBoardAndCardsRemaining();\n    const initialState = getInitialState(cardsRemaining, initialBoard);\n    this.setState({ gameState: [initialState] });\n  };\n\n  clearStats = () => {\n    localStorage.removeItem(\"totalLosses\");\n    localStorage.removeItem(\"totalWins\");\n    localStorage.removeItem(\"rageQuits\");\n    this.currentStreakNumber = null;\n    this.setState({\n      totalLosses: 0,\n      totalWins: 0,\n      rageQuits: 0,\n      showCardsRemainingUnlocked: false,\n    });\n  };\n\n  setBackground = (selectedBackground) => {\n    localStorage.setItem(\"backgroundPreference\", selectedBackground);\n    this.setState({ selectedBackground });\n    console.log(process.env.PUBLIC_URL);\n    console.log(\"version updated\");\n  };\n\n  handleWinLossStats = (gameWon) => {\n    if (!gameWon) {\n      if (this.currentStreakType === \"losses\") {\n        this.currentStreakNumber++;\n      } else if (\n        this.currentStreakType === \"wins\" ||\n        this.currentStreakType === null\n      ) {\n        this.currentStreakNumber = 1;\n      }\n      this.currentStreakType = \"losses\";\n      // this.totalLosses++;\n      this.setState(\n        (prevState) => ({ totalLosses: prevState.totalLosses + 1 }),\n        () => {\n          localStorage.setItem(\"totalLosses\", this.state.totalLosses);\n        }\n      );\n    } else {\n      if (this.currentStreakType === \"wins\") {\n        this.currentStreakNumber++;\n      } else if (\n        this.currentStreakType === \"losses\" ||\n        this.currentStreakType === null\n      ) {\n        this.currentStreakNumber = 1;\n      }\n      // this.totalWins++;\n      this.currentStreakType = \"wins\";\n      this.setState(\n        (prevState) => ({ totalWins: prevState.totalWins + 1 }),\n        () => {\n          localStorage.setItem(\"totalWins\", this.state.totalWins);\n          this.handleUnlocks();\n        }\n      );\n    }\n  };\n\n  handleUnlocks = () => {\n    console.log(this.state.totalWins === 1);\n    this.setState({\n      ...(this.state.totalWins === 1 && { showCardsRemainingUnlocked: true }),\n    });\n  };\n\n  handleCheatingCheckbox = (event) => {\n    this.formattedCardsRemainingList = event.target.checked\n      ? formatRemainingCardsCount(\n          this.state.gameState[this.state.gameState.length - 1].cardsRemaining\n        )\n      : null;\n    this.setState({ isThePlayerACheater: event.target.checked });\n  };\n\n  render() {\n    // const cardsRemainingIcons = this.state.gameState[this.state.gameState.length - 1].cardsRemaining.map(() =>\n    //     <img className=\"cards-remaining-card\" src={process.env.PUBLIC_URL + `/cardback.jpg`} alt=\"not found :(\"></img>\n    // );\n    // const guessIcon = this.previousGuess === 'lower' ? <GoArrowDown className=\"guess-icon\"/> : <GoArrowUp className=\"guess-icon\"/>\n    return (\n      // <React.Fragment>\n      // <Container fluid className=\"container-override\">\n      // <div>\n      <Container\n        fluid=\"lg\"\n        style={{ backgroundColor: \"white\", padding: \"0px\" }}\n      >\n        <Navbar bg=\"dark\" variant=\"dark\">\n          {/* <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\"> */}\n          {/* <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand> */}\n          <img\n            src={process.env.PUBLIC_URL + \"/boximage.png\"}\n            width=\"30\"\n            height=\"30\"\n            alt=\"The Box Game\"\n          />\n          {/* <Navbar.Brand style={{ paddingLeft: '5px' }}>The Box Game</Navbar.Brand> */}\n          <Form inline>\n            <NavDropdown title=\"The Box Game\">\n              <NavDropdown.Item>\n                <Link className=\"dropdown-item\" to=\"/\">\n                  Single Player\n                </Link>\n              </NavDropdown.Item>\n              <NavDropdown.Item>\n                <Link className=\"dropdown-item\" to=\"/multiplayer/1\">\n                  Multiplayer Game #1\n                </Link>\n              </NavDropdown.Item>\n              <NavDropdown.Item>\n                <Link className=\"dropdown-item\" to=\"/multiplayer/2\">\n                  Multiplayer Game #2\n                </Link>\n              </NavDropdown.Item>\n              <NavDropdown.Item>\n                <Link className=\"dropdown-item\" to=\"/multiplayer/3\">\n                  Multiplayer Game #3\n                </Link>\n              </NavDropdown.Item>\n            </NavDropdown>\n          </Form>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse>\n            <Nav className=\"mr-auto\">\n              {/* <Nav.Link href=\"#home\">Home</Nav.Link>\n                            <Nav.Link href=\"#link\">Link</Nav.Link> */}\n              {/* <Button variant=\"outline-danger\" onClick={() => this.resetGame(true)}>Rage Quit</Button> */}\n            </Nav>\n            {/* <Form inline>\n                            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                            <Button variant=\"outline-success\">Search</Button>\n                        </Form> */}\n            <Form inline>\n              <NavDropdown title=\"Background\">\n                <NavDropdown.Item\n                  className=\"dropdown-item\"\n                  onClick={() => this.setBackground(\"amEx\")}\n                >\n                  AmEx\n                </NavDropdown.Item>\n                <NavDropdown.Item\n                  className=\"dropdown-item\"\n                  onClick={() => this.setBackground(\"darkPattern\")}\n                >\n                  Dark Pattern\n                </NavDropdown.Item>\n                <NavDropdown.Item\n                  className=\"dropdown-item\"\n                  onClick={() => this.setBackground(\"earth\")}\n                >\n                  Earth\n                </NavDropdown.Item>\n                <NavDropdown.Item\n                  className=\"dropdown-item\"\n                  onClick={() => this.setBackground(\"mars\")}\n                >\n                  Mars\n                </NavDropdown.Item>\n                <NavDropdown.Item\n                  className=\"dropdown-item\"\n                  onClick={() => this.setBackground(\"moon\")}\n                >\n                  Moon\n                </NavDropdown.Item>\n                <NavDropdown.Item\n                  className=\"dropdown-item\"\n                  onClick={() => this.setBackground(\"underwater\")}\n                >\n                  Underwater\n                </NavDropdown.Item>\n                <NavDropdown.Item\n                  className=\"dropdown-item\"\n                  onClick={() => this.setBackground(\"wood\")}\n                >\n                  Wood\n                </NavDropdown.Item>\n                {/* <NavDropdown.Item onClick={this.setBackground()}>Something</NavDropdown.Item> */}\n                {/* <NavDropdown.Divider /> */}\n                {/* <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item> */}\n              </NavDropdown>\n            </Form>\n            <FaStickyNote\n              onClick={() => this.toggleModal(\"showNotesModal\")}\n              style={{\n                marginRight: \"16px\",\n                width: \"20px\",\n                height: \"20px\",\n                cursor: \"pointer\",\n                color: \"white\",\n              }}\n            ></FaStickyNote>\n            <FaQuestion\n              onClick={() => this.toggleModal(\"showHelpModal\")}\n              style={{\n                width: \"20px\",\n                height: \"20px\",\n                cursor: \"pointer\",\n                color: \"white\",\n              }}\n            />\n          </Navbar.Collapse>\n        </Navbar>\n        {/* <Modals testing=\"ok\"></Modals> */}\n        <Modal\n          centered={true}\n          show={this.state.showNotesModal}\n          onHide={() => this.toggleModal(\"showNotesModal\")}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Connor's Future Enhancements</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            Here are some enhancements I would like to make:\n            <ul>\n              <li>Remove margin from righthand side</li>\n              <li>✅ Save background choice</li>\n              <li>Allow profile to be created</li>\n              <li>Create API backend to manage accounts</li>\n              <li>Make mad, mad cash</li>\n              <li>Add undo functionality</li>\n              <li>Write How to play section</li>\n              <li>Add deck of cards animation</li>\n              <li>Add samesies</li>\n              <li>Enhance Unlockables</li>\n              <li>Prevent screen refreshing to avoid loss count</li>\n            </ul>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"secondary\"\n              onClick={() => this.toggleModal(\"showNotesModal\")}\n            >\n              Close\n            </Button>\n            {/* <Button variant=\"primary\" onClick={this.toggleHelpModal}>\n                            Save Changes\n                        </Button> */}\n          </Modal.Footer>\n        </Modal>\n        <Modal\n          centered={true}\n          show={this.state.showHelpModal}\n          onHide={() => this.toggleModal(\"showHelpModal\")}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>How to Play</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <strong>Intro: </strong>The Box Game started out as a drinking game\n            at Virginia Tech, and now it's being presented to you by Connor.{\" \"}\n            <br />\n            <br />\n            <strong>Objective:</strong> Go through the 52 card deck before all 9\n            card piles are flipped over. On your turn, choose Higher or Lower on\n            one of the available piles by clicking the top half or bottom half\n            of the card. If you are correct, the pile remains available. If you\n            are wrong, the pile is flipped over and is no longer available for\n            selection.\n            <br />\n            <br />\n            <strong>Stats/Unlockables</strong> There are rewards for winning X\n            number of games. Keep playing to see if you can unlock them all.\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"secondary\"\n              onClick={() => this.toggleModal(\"showHelpModal\")}\n            >\n              Close\n            </Button>\n            {/* <Button variant=\"primary\" onClick={this.toggleHelpModal}>\n                            Save Changes\n                        </Button> */}\n          </Modal.Footer>\n        </Modal>\n        <Modal\n          centered={true}\n          show={this.state.showStatResetModal}\n          onHide={() => this.toggleModal(\"showStatResetModal\")}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Are you sure?</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            Clicking Confirm will erase all of your stats and reset your\n            progress towards unlockables.\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"secondary\"\n              onClick={() => this.toggleModal(\"showStatResetModal\")}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"danger\"\n              onClick={() => {\n                this.toggleModal(\"showStatResetModal\");\n                this.clearStats();\n              }}\n            >\n              Confirm\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <Row className=\"main-row\">\n          <Col xs={12} sm={4} className=\"infoDiv\">\n            {/* <div className=\"infoDiv\"> */}\n            {/* <h5>Current Game Info</h5> */}\n            <CurrentGameInfo\n              currentState={\n                this.state.gameState[this.state.gameState.length - 1]\n              }\n              previousGuess={this.previousGuess}\n              resetGame={(rageQuit) => this.resetGame(rageQuit)}\n            />\n            <hr className=\"custom-hr\" />\n            <div style={{ display: \"flex\" }}>\n              <div>\n                <div className=\"stats-header\">Stats</div>\n                <div className=\"stat-line\">\n                  Total Wins: {this.state.totalWins}\n                </div>\n                <div className=\"stat-line\">\n                  Total Losses: {this.state.totalLosses}\n                </div>\n                {/* <div className=\"stat-line\">Winning Percentage: {this.state.totalWins+this.state.totalLosses !== 0 ? parseFloat((this.state.totalWins/(this.state.totalWins+this.state.totalLosses))).toFixed(2)+\"%\" : 'N/A'}</div> */}\n                {/* var s = Number(num/100).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2});  */}\n\n                <div className=\"stat-line\">\n                  Winning Percentage:{\" \"}\n                  {this.state.totalWins + this.state.totalLosses !== 0\n                    ? Number(\n                        this.state.totalWins /\n                          (this.state.totalWins + this.state.totalLosses)\n                      ).toLocaleString(undefined, {\n                        style: \"percent\",\n                        minimumFractionDigits: 2,\n                      })\n                    : \"N/A\"}\n                </div>\n                <div className=\"stat-line\">\n                  Current Streak:{\" \"}\n                  {this.currentStreakNumber\n                    ? `${this.currentStreakNumber} ${this.currentStreakType} in a row`\n                    : \"N/A\"}\n                </div>\n                <div className=\"stat-line\">\n                  Rage Quits: {this.state.rageQuits}\n                </div>\n                <Button\n                  className=\"info-div-buttons\"\n                  variant=\"outline-warning\"\n                  size=\"sm\"\n                  onClick={() => this.toggleModal(\"showStatResetModal\")}\n                >\n                  Reset Stats\n                </Button>\n                <Button\n                  className=\"info-div-buttons\"\n                  variant=\"outline-danger\"\n                  size=\"sm\"\n                  onClick={() => this.resetGame(true)}\n                  style={{ marginLeft: \"10px\" }}\n                >\n                  Rage Quit\n                </Button>\n              </div>\n              <div style={{ marginLeft: \"auto\" }}>\n                {this.previousGuess && (\n                  <>\n                    You Guessed: {this.previousGuess}\n                    <br />\n                    <br />\n                  </>\n                )}\n                <div style={{ display: \"flex\" }}>\n                  {this.previousCardImageUrl && (\n                    <div style={{ marginRight: \"20px\" }}>\n                      Previous Card:\n                      <br />\n                      <Image\n                        style={{\n                          width: \"50px\",\n                          borderRadius: \"4%\",\n                        }}\n                        src={this.previousCardImageUrl}\n                        alt=\"nothing loaded :(\"\n                      />\n                    </div>\n                  )}\n                  {this.currentCardImageUrl && (\n                    <div>\n                      Card Drawn:\n                      <br />\n                      <Image\n                        style={{\n                          width: \"50px\",\n                          borderRadius: \"4%\",\n                          marginLeft: \"10px\",\n                        }}\n                        src={this.currentCardImageUrl}\n                        alt=\"nothing loaded :(\"\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <hr className=\"custom-hr\" />\n            <div id=\"unlockables-section\">\n              <div className=\"stats-header\">Unlockables</div>\n              {/* <table class=\"table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Wins Needed</th>\n      <th scope=\"col\">Ability</th>\n      <th scope=\"col\">Activate?</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">1</th>\n      <td>Show Remaining Card Counts</td>\n      <td>Otto</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">2</th>\n      <td>Jacob</td>\n      <td>Thornton</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">3</th>\n      <td>Larry</td>\n      <td>the Bird</td>\n    </tr>\n  </tbody>\n</table> */}\n              {this.state.showCardsRemainingUnlocked ? (\n                <Form.Check\n                  // disabled={!this.state.showCardsRemainingUnlocked}\n                  inline\n                  name=\"isThePlayerACheater\"\n                  type=\"checkbox\"\n                  id=\"custom-switch\"\n                  checked={this.state.isThePlayerACheater}\n                  onChange={this.handleCheatingCheckbox}\n                  label=\"Show remaining card counts\"\n                />\n              ) : (\n                <OverlayTrigger\n                  overlay={\n                    <Tooltip id=\"tooltip-disabled\">\n                      You must win one game to unlock this\n                    </Tooltip>\n                  }\n                >\n                  <div\n                    style={{ height: \"30px\", paddingTop: \"10px\" }}\n                    className=\"d-inline-block\"\n                  >\n                    {/* <Button disabled style={{ pointerEvents: 'none' }}>\n                            Disabled button\n                             </Button> */}\n                    <Form>\n                      <Form.Check\n                        disabled={!this.state.showCardsRemainingUnlocked}\n                        inline\n                        name=\"isThePlayerACheater\"\n                        type=\"checkbox\"\n                        id=\"custom-switch\"\n                        checked={this.state.isThePlayerACheater}\n                        onChange={this.handleCheatingCheckbox}\n                        label=\"Show remaining card counts\"\n                      />\n                    </Form>\n                  </div>\n                </OverlayTrigger>\n              )}\n              {/* <Form>\n                            <Form.Check\n                                disabled={true}\n                                inline\n                                name=\"isThePlayerACheater\"\n                                type=\"checkbox\"\n                                id=\"custom-switch\"\n                                checked={this.state.isThePlayerACheater}\n                                onChange={this.handleCheatingCheckbox}\n                                label=\"Show remaining card counts\"\n                            />\n                        </Form> */}\n              {/* {this.state.gameState[this.state.gameState.length - 1].gameWon === true ? <h4>You Win! You're a genius!</h4> : null} */}\n              {this.state.isThePlayerACheater &&\n                this.formattedCardsRemainingList.map((card) => (\n                  <div>{card}</div>\n                ))}\n            </div>\n          </Col>\n          <Col\n            xs={12}\n            sm={8}\n            className=\"col-override\"\n            // <Col xs={12} sm={8}\n            // style={{display: 'flex', }}\n          >\n            {this.state.gameState[this.state.gameState.length - 1].gameLost ===\n              true && (\n              <div className=\"you-lose-overlay\">\n                <div className=\"you-lose-modal\">\n                  <h1>You Lose!</h1>\n                  <div className=\"game-summary\">\n                    <table class=\"table table-override\">\n                      <thead>\n                        {/* <tr>\n      <th scope=\"col\">Wins Needed</th>\n      <th scope=\"col\">Ability</th>\n      <th scope=\"col\">Activate?</th>\n    </tr> */}\n                      </thead>\n                      <tbody>\n                        {/* <tr>\n      <th scope=\"row\">1</th>\n      <td>Show Remaining Card Counts</td>\n      <td>Otto</td>\n    </tr> */}\n                        <tr>\n                          <th scope=\"row\">Cards Remaining</th>\n                          <td>\n                            {\n                              this.state.gameState[\n                                this.state.gameState.length - 1\n                              ].cardsRemaining.length\n                            }\n                          </td>\n                          {/* <td>Thornton</td> */}\n                        </tr>\n                        <tr>\n                          <th scope=\"row\">Number of Samesies</th>\n                          <td>{this.numberOfSamesies}</td>\n                          {/* <td>the Bird</td> */}\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                  <Button onClick={() => this.resetGame()} variant=\"secondary\">\n                    Play Again?\n                  </Button>\n                </div>\n              </div>\n            )}\n            {this.state.gameState[this.state.gameState.length - 1].gameWon ===\n              true && (\n              <div className=\"you-win-overlay\">\n                <div className=\"you-win-modal\">\n                  <h1>You Win, YAY!</h1>\n                  {this.state.totalWins === 1 && (\n                    <h6>\n                      Congrats! You can now show remaining card counts\n                      <br /> by using the checkbox in the Unlockables section{\" \"}\n                    </h6>\n                  )}\n                  <Button onClick={() => this.resetGame()} variant=\"secondary\">\n                    Play Again?\n                  </Button>\n                </div>\n              </div>\n            )}\n            <Board\n              // style={{    flex: '1 1 auto',\n              //     minWidth: '0'}}\n              squares={\n                this.state.gameState[this.state.gameState.length - 1]\n                  .currentBoard\n              }\n              evaluateGuess={(i, higherLowerOrSamesies) =>\n                this.handleGuessAndManageState(i, higherLowerOrSamesies)\n              }\n              selectedBackground={this.state.selectedBackground}\n            />\n          </Col>\n        </Row>\n      </Container>\n      // </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\n\nconst Modals = ({modalToShow, toggleModal, savePlayerInfo, handleChange, selectedBackground, playerName}) => {\n    // modalToShow options are:\n    // - notes\n    // - playerInfo\n    // - help\n    // - statReset\n    return (\n        <React.Fragment>\n            <Modal centered={true} show={modalToShow === 'notes'} onHide={() => toggleModal('notes')}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Connor's Future Enhancements</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>Here are some enhancements I would like to make:\n                            <ul>\n                            <li>Remove margin from righthand side</li>\n                            <li>✅ Save background choice</li>\n                            <li>Allow profile to be created</li>\n                            <li>Create API backend to manage accounts</li>\n                            <li>Make mad, mad cash</li>\n                            <li>Add undo functionality</li>\n                            <li>Write How to play section</li>\n                            <li>Add deck of cards animation</li>\n                            <li>Add samesies</li>\n                            <li>Enhance Unlockables</li>\n                            <li>Prevent screen refreshing to avoid loss count</li>\n                        </ul>\n\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={() => toggleModal('notes')}>\n                            Close\n                        </Button>\n                        {/* <Button variant=\"primary\" onClick={this.toggleHelpModal}>\n                            Save Changes\n                        </Button> */}\n                    </Modal.Footer>\n                </Modal>\n                <Modal backdrop='static' centered={true} show={modalToShow === 'playerInfo'}>\n                    <Modal.Header >\n                        <Modal.Title>Enter your name and pick a background</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form>\n                            <Form.Group controlId=\"exampleForm.ControlInput1\">\n                                <Form.Label>Username</Form.Label>\n                                <Form.Control maxLength=\"12\" required name=\"playerName\" onChange={(e)=> handleChange(e)} value={playerName} type=\"text\" />\n                            </Form.Group>\n                            <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                                <Form.Label>Background Image</Form.Label>\n                                <Form.Control value={selectedBackground} name=\"selectedBackground\" onChange={(e)=> handleChange(e)} as=\"select\">\n                                    <option value=\"amEx\">AmEx</option>\n                                    <option value=\"darkPattern\">Dark Pattern</option>\n                                    <option value=\"earth\">Earth</option>\n                                    <option value=\"mars\">Mars</option>\n                                    <option value=\"moon\">Moon</option>\n                                    <option value=\"underwater\">Underwater</option>\n                                    <option value=\"wood\">Wood</option>\n                                </Form.Control>\n                            </Form.Group>\n                        </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button role=\"button\" variant=\"secondary\" onClick={() => savePlayerInfo()}>\n                            Save\n                        </Button>\n                        {/* <Button variant=\"primary\" onClick={this.toggleHelpModal}>>\n                            Save Changes\n                        </Button> */}\n                    </Modal.Footer>\n                </Modal>\n                <Modal centered={true} show={modalToShow === 'help'} onHide={() => toggleModal('help')}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>How to Play</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <strong>Intro: </strong>The Box Game started out as a drinking game at Virginia Tech, and now\n                        it's being presented to you by Connor. <br /><br />\n                        <strong>Objective:</strong> Go through the 52 card deck before all 9 card piles are flipped over. On your turn,\n                        choose Higher or Lower on one of the available piles by clicking the top half or bottom half of the card. If you are\n                        correct, the pile remains available. If you are wrong, the pile is flipped over and is no longer available for selection.\n                        <br /><br />\n                        <strong>Stats/Unlockables</strong> There are rewards for winning X number of games. Keep playing to see if you can unlock them all.\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={() => toggleModal('help')}>\n                            Close\n                        </Button>\n                        {/* <Button variant=\"primary\" onClick={this.toggleHelpModal}>\n                            Save Changes\n                        </Button> */}\n                    </Modal.Footer>\n                </Modal>\n                <Modal centered={true} show={modalToShow === 'statReset'} onHide={() => toggleModal('statReset')}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Are you sure?</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>Clicking Confirm will erase all of your stats and reset your progress towards unlockables.</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={() => this.toggleModal('showStatResetModal')}>\n                            Cancel\n                        </Button>\n                        <Button variant=\"danger\" onClick={() => { toggleModal('statReset'); this.clearStats() }}>\n                            Confirm\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n        </React.Fragment>\n    );\n}\n\nexport default Modals;\n","import React from \"react\";\nimport ResponsiveEmbed from \"react-bootstrap/ResponsiveEmbed\";\nimport Image from \"react-bootstrap/Image\";\n\nfunction Square(props) {\n  return (\n    // <div style={{ height: 'auto', maxWidth: '14.5vw', minHeight: '15vh', position: 'relative' }}>\n    //     {props.spotIsStillValid ? <div onClick={props.guessHigher} className=\"higher-button\"></div> : null}\n    //     <ResponsiveEmbed aspectRatio=\"1by1\">\n    //         <Image style={{ objectFit: 'contain', ...(props.imgPath.includes('cardback') ? { borderRadius: '26%' } : {}) }} src={props.imgPath} alt=\"nothing loaded :(\" ></Image>\n    //     </ResponsiveEmbed>\n\n    //     {props.spotIsStillValid ? <div onClick={props.guessLower} className=\"lower-button\"></div> : null}\n    // </div>\n    <div\n      style={{\n        position: \"relative\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      {props.spotIsStillValid && (\n        <div onClick={props.guessHigher} className=\"higher-button\"></div>\n      )}\n      <Image\n        style={{\n          width: \"70%\",\n          ...(props.imgPath.includes(\"cardback\") ? { borderRadius: \"4%\" } : {}),\n        }}\n        src={props.imgPath}\n        alt=\"nothing loaded :(\"\n      ></Image>\n      {props.spotIsStillValid && (\n        <div onClick={props.guessLower} className=\"lower-button\"></div>\n      )}\n    </div>\n  );\n}\n\nexport default Square;\n","import React from \"react\";\n\nconst PlayersInGame = ({ currentState }) => {\n    return (\n        <div id=\"players-in-gave-div\">\n            <h6>Players in Game:</h6>\n            {/* <div id=\"whos-turn-is-it\"> */}\n            {currentState.playersInSession.map((person)=>{\n                return <div style={{...(person.activePlayer && {color: 'blue'})}}>\n                    {person.activePlayer && '(active) '}{person.playerName}\n            {` - Correct: ${person.correctGuesses} Incorrect: ${person.incorrectGuesses}`}\n                    </div>\n            })}\n            {/* </div> */}\n\n            \n        </div>\n    );\n}\n\nexport default PlayersInGame;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n// import { Beforeunload } from 'react-beforeunload';\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  evaluateGuess,\n  formatRemainingCardsCount,\n} from \"../logic-functions/helperFunctions\";\nimport {\n  getInitialBoardAndCardsRemaining,\n  getInitialState,\n} from \"../logic-functions/setUpInitialBoard\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Form from \"react-bootstrap/Form\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport Button from \"react-bootstrap/Button\";\nimport { FaQuestion, FaStickyNote, FaTumblrSquare } from \"react-icons/fa\";\nimport { Board, Modals } from \"./\";\nimport CurrentGameInfo from \"./CurrentGameInfo\";\nimport GuessHistory from \"./GuessHistory\";\nimport PlayersInGame from \"./PlayersInGame\";\n// related to socket testing\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"https://morning-shore-03481.herokuapp.com\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.disconnectFromSession = this.disconnectFromSession.bind(this);\n    const { cardsRemaining, initialBoard } = getInitialBoardAndCardsRemaining();\n    const initialState = getInitialState(cardsRemaining, initialBoard);\n    // window.addEventListener('beforeunload', this.componentCleanup);\n    this.state = {\n      gameState: [initialState],\n      // gameState: [null],\n      modalToShow: null,\n      playerName: null,\n      selectedBackground:\n        localStorage.getItem(\"backgroundPreference\") || \"amEx\",\n      isItPlayersTurn: false,\n    };\n  }\n\n  componentDidMount() {\n    window.onbeforeunload = function () {\n      // this.onUnload();\n      console.log(\"WE HERE\");\n      this.disconnectFromSession();\n      // return \"\";\n    }.bind(this);\n    // window.addEventListener('beforeunload', this.componentCleanup);\n    this.connectToSocket();\n    if (!this.state.playerName) {\n      this.toggleModal(\"playerInfo\", true);\n    }\n  }\n\n  connectToSocket = () => {\n    this.socket = socketIOClient(ENDPOINT);\n    this.socket.emit(`joining game ${this.props.gameNumber}`);\n    this.socket.on(`joiningGameState${this.props.gameNumber}`, (response) => {\n      if (!response) {\n        this.emitToSocket(\n          this.state.gameState[this.state.gameState.length - 1]\n        );\n      } else {\n        this.setState({\n          gameState: [...this.state.gameState, response],\n        });\n      }\n    });\n    this.socket.on(`newState${this.props.gameNumber}`, (newState) => {\n      this.setState({\n        gameState: [...this.state.gameState, newState],\n        isItPlayersTurn: this.isItPlayersTurnFunction(newState),\n      });\n    });\n  };\n\n  isItPlayersTurnFunction = (stateToCompareWith) => {\n    const playersInSession = stateToCompareWith.playersInSession;\n\n    const indexOfActivePlayer = playersInSession.findIndex((person) => {\n      return person.activePlayer === true;\n    });\n\n    console.log(JSON.stringify(playersInSession), indexOfActivePlayer);\n\n    if (\n      !stateToCompareWith.gameWon &&\n      !stateToCompareWith.gameLost &&\n      indexOfActivePlayer !== -1\n    ) {\n      if (\n        playersInSession[indexOfActivePlayer].sessionId === this.state.sessionId\n      ) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  };\n\n  disconnectFromSession() {\n    const currentState = this.state.gameState[this.state.gameState.length - 1];\n    const indexOfPlayer = currentState.playersInSession.findIndex((item) => {\n      return item.sessionId === this.state.sessionId;\n    });\n    if (currentState.playersInSession[indexOfPlayer].activePlayer === true) {\n      if (\n        indexOfPlayer === currentState.playersInSession.length - 1 &&\n        currentState.playersInSession.length !== 1\n      ) {\n        currentState.playersInSession[0].activePlayer = true;\n      } else if (currentState.playersInSession.length === 1) {\n        currentState.playersInSession[indexOfPlayer].activePlayer = true;\n      } else {\n        currentState.playersInSession[indexOfPlayer + 1].activePlayer = true;\n      }\n    }\n    currentState.playersInSession.splice(indexOfPlayer, 1);\n    this.emitToSocket(currentState);\n  }\n\n  // componentWillUnmount(){\n  //     console.log('here')\n  // }\n\n  // componentWillUnmount() {\n  //     alert('here')\n  //     // alert('ok')\n  //     // const currentState = this.state.gameState[this.state.gameState.length - 1];\n  //     // const indexOfPlayer = currentState.playersInSession.indexOf((item)=>item.sessionId === this.state.sessionId);\n  //     // const stateWithPlayerRemoved = currentState.splice(indexOfPlayer, 1);\n  //     // this.emitToSocket(stateWithPlayerRemoved);\n  //     this.componentCleanup();\n  //     window.removeEventListener('beforeunload', this.componentCleanup);\n  // }\n\n  emitToSocket = (newState) => {\n    console.log(newState);\n    this.socket.emit(`newState${this.props.gameNumber}`, newState);\n  };\n\n  handleGuessAndManageState(i, higherLowerOrSamesies) {\n    const currentState = {\n      ...this.state.gameState[this.state.gameState.length - 1],\n    };\n    const { newState } = evaluateGuess(i, higherLowerOrSamesies, currentState);\n    const { cardDrawn, previousCard, numberOfSamesies } = newState;\n    this.cardDrawn = cardDrawn;\n    this.previousCard = previousCard;\n    this.numberOfSamesies = numberOfSamesies;\n    const indexOfActivePlayer = currentState.playersInSession.findIndex(\n      (person) => person.activePlayer === true\n    );\n    const lengthOfPlayersIndex = currentState.playersInSession.length;\n\n    if (newState.guessWasCorrect) {\n      newState.playersInSession[indexOfActivePlayer].correctGuesses++;\n    } else {\n      newState.playersInSession[indexOfActivePlayer].incorrectGuesses++;\n    }\n\n    if (indexOfActivePlayer === lengthOfPlayersIndex - 1) {\n      // keep these two in this order please\n      newState.playersInSession[indexOfActivePlayer].activePlayer = false;\n      newState.playersInSession[0].activePlayer = true;\n    } else {\n      newState.playersInSession[indexOfActivePlayer].activePlayer = false;\n      newState.playersInSession[indexOfActivePlayer + 1].activePlayer = true;\n    }\n    newState.playersWhoGuessedLast = [\n      ...(currentState.playersWhoGuessedLast\n        ? currentState.playersWhoGuessedLast\n        : []),\n      {\n        playerName: this.state.playerName,\n        guessWasCorrect: newState.guessWasCorrect.toString(),\n      },\n    ];\n    this.formattedCardsRemainingList = formatRemainingCardsCount(\n      newState.cardsRemaining\n    );\n    this.setState(\n      {\n        isItPlayersTurn: this.isItPlayersTurnFunction(newState),\n      },\n      () => {\n        this.emitToSocket(newState);\n      }\n    );\n  }\n\n  toggleModal = (modal, showModal) => {\n    this.setState({\n      modalToShow: showModal ? modal : null,\n    });\n  };\n\n  resetGame = (clearAllState) => {\n    // this.previousGuess = null;\n    const { cardsRemaining, initialBoard } = getInitialBoardAndCardsRemaining();\n    const initialState = getInitialState(cardsRemaining, initialBoard);\n    // initialState.playersInSession = [];\n    const oldPlayersInSessionWithStats = this.state.gameState[\n      this.state.gameState.length - 1\n    ].playersInSession;\n    const withoutStats = oldPlayersInSessionWithStats.map((person) => {\n      person.correctGuesses = 0;\n      person.incorrectGuesses = 0;\n      return person;\n    });\n    initialState.playersInSession = clearAllState ? [] : withoutStats;\n    this.emitToSocket(initialState);\n    if (clearAllState) {\n      alert(\"Please refresh the page. I haven't fixed this yet\");\n    }\n  };\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  savePlayerInfo = () => {\n    if (this.state.playerName) {\n      // if (!this.state.sessionId) {\n      this.setState(\n        (prevState) => ({ sessionId: prevState.sessionId || uuidv4() }),\n        () => {\n          this.toggleModal(\"playerInfo\", false);\n          const currentState = this.state.gameState[\n            this.state.gameState.length - 1\n          ];\n          const playerInfoObject = {\n            playerName: this.state.playerName,\n            sessionId: this.state.sessionId,\n            activePlayer: true,\n            incorrectGuesses: 0,\n            correctGuesses: 0,\n          };\n          if (currentState.playersInSession) {\n            // const isPlayerInArray = currentState.playersInSession.some((item) => {\n            //     return item.sessionId === this.state.sessionId;\n            // })\n            const indexOfPlayerInArray = currentState.playersInSession.findIndex(\n              (item) => item.sessionId === this.state.sessionId\n            );\n            if (indexOfPlayerInArray < 0) {\n              const playerInfoObjectNotActive = { ...playerInfoObject };\n              playerInfoObjectNotActive.activePlayer =\n                currentState.playersInSession.length === 0 ? true : false;\n              currentState.playersInSession.push(playerInfoObjectNotActive);\n            } else {\n              currentState.playersInSession[\n                indexOfPlayerInArray\n              ] = playerInfoObject;\n            }\n          } else {\n            currentState.playersInSession = [playerInfoObject];\n          }\n\n          this.setState(\n            {\n              isItPlayersTurn: this.isItPlayersTurnFunction(currentState),\n            },\n            () => {\n              this.emitToSocket(currentState);\n            }\n          );\n\n          // this.emitToSocket(currentState)\n          // this.setState({\n          //     playerInfoReceived: true,\n          // })\n        }\n      );\n      // }\n      // this.toggleModal('playerInfo', false)\n      // const currentState = this.state.gameState[this.state.gameState.length - 1];\n      // if (!currentState.playersInSession.includes(this.state.playerName)) {\n      //     currentState.playersInSession.push(this.state.playerName)\n      // }\n      // this.emitToSocket(currentState)\n      // this.setState({\n      //     playerInfoReceived: true,\n      // })\n    }\n    localStorage.setItem(\"backgroundPreference\", this.state.selectedBackground);\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          {/* <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\"> */}\n          {/* <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand> */}\n          <img\n            src={process.env.PUBLIC_URL + \"/boximage.png\"}\n            width=\"30\"\n            height=\"30\"\n            alt=\"The Box Game\"\n          />\n          {/* <Navbar.Brand style={{ paddingLeft: '5px' }}>The Box Game</Navbar.Brand> */}\n          <Form inline>\n            <NavDropdown title=\"The Box Game\">\n              <NavDropdown.Item>\n                <Link className=\"dropdown-item\" to=\"/\">\n                  Single Player\n                </Link>\n              </NavDropdown.Item>\n              <NavDropdown.Item>\n                <Link className=\"dropdown-item\" to=\"/multiplayer/1\">\n                  Multiplayer Game #1\n                </Link>\n              </NavDropdown.Item>\n              <NavDropdown.Item>\n                <Link className=\"dropdown-item\" to=\"/multiplayer/2\">\n                  Multiplayer Game #2\n                </Link>\n              </NavDropdown.Item>\n              <NavDropdown.Item>\n                <Link className=\"dropdown-item\" to=\"/multiplayer/3\">\n                  Multiplayer Game #3\n                </Link>\n              </NavDropdown.Item>\n            </NavDropdown>\n          </Form>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse>\n            <Nav className=\"mr-auto\" />\n            <div\n              onClick={() => {\n                this.toggleModal(\"playerInfo\", true);\n              }}\n              style={{\n                cursor: \"pointer\",\n                textDecoration: \"underline\",\n                color: \"white\",\n                paddingRight: \"16px\",\n              }}\n            >\n              {this.state.playerName}\n            </div>\n\n            <FaStickyNote\n              onClick={() => this.toggleModal(\"notes\", true)}\n              style={{\n                marginRight: \"16px\",\n                width: \"20px\",\n                height: \"20px\",\n                cursor: \"pointer\",\n                color: \"white\",\n              }}\n            ></FaStickyNote>\n            <FaQuestion\n              onClick={() => this.toggleModal(\"help\", true)}\n              style={{\n                width: \"20px\",\n                height: \"20px\",\n                cursor: \"pointer\",\n                color: \"white\",\n              }}\n            />\n          </Navbar.Collapse>\n        </Navbar>\n        <Modals\n          modalToShow={this.state.modalToShow}\n          toggleModal={(modal, showModal) => this.toggleModal(modal, showModal)}\n          savePlayerInfo={() => this.savePlayerInfo()}\n          handleChange={(e) => this.handleChange(e)}\n          selectedBackground={this.state.selectedBackground}\n          playerName={this.state.playerName}\n          playerInfoReceived={this.state.playerInfoReceived}\n        />\n        {this.state.sessionId && (\n          <div id=\"main-container\">\n            <div id=\"info-pane\">\n              {/* <GuessHistory currentState={this.state.gameState[this.state.gameState.length - 1]} /> */}\n              <CurrentGameInfo\n                currentState={\n                  this.state.gameState[this.state.gameState.length - 1]\n                }\n                // previousGuess={this.previousGuess}\n                resetGame={(rageQuit) => this.resetGame(rageQuit)}\n              />\n              <PlayersInGame\n                currentState={\n                  this.state.gameState[this.state.gameState.length - 1]\n                }\n              />\n            </div>\n            <div\n              id=\"main-board\"\n              style={{\n                ...(!this.state.isItPlayersTurn &&\n                  !this.state.gameState[this.state.gameState.length - 1]\n                    .gameWon &&\n                  !this.state.gameState[this.state.gameState.length - 1]\n                    .gameLost && { pointerEvents: \"none\" }),\n              }}\n            >\n              {this.state.gameState[this.state.gameState.length - 1]\n                .gameLost === true && (\n                <div className=\"you-lose-overlay\">\n                  <div className=\"you-lose-modal\">\n                    <h1>You Lose!</h1>\n                    <div className=\"game-summary\">\n                      <table class=\"table table-override\">\n                        <thead></thead>\n                        <tbody>\n                          <tr>\n                            <th scope=\"row\">Cards Remaining</th>\n                            <td>\n                              {\n                                this.state.gameState[\n                                  this.state.gameState.length - 1\n                                ].cardsRemaining.length\n                              }\n                            </td>\n                          </tr>\n                          <tr>\n                            <th scope=\"row\">Number of Samesies</th>\n                            <td>{this.numberOfSamesies}</td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </div>\n                    <Button\n                      onClick={() => this.resetGame()}\n                      variant=\"secondary\"\n                    >\n                      Play Again?\n                    </Button>\n                  </div>\n                </div>\n              )}\n              {this.state.gameState[this.state.gameState.length - 1].gameWon ===\n                true && (\n                <div className=\"you-win-overlay\">\n                  <div className=\"you-win-modal\">\n                    <h1>You Win, YAY!</h1>\n                    <Button\n                      onClick={() => this.resetGame()}\n                      variant=\"secondary\"\n                    >\n                      Play Again?\n                    </Button>\n                  </div>\n                </div>\n              )}\n              <Board\n                squares={\n                  this.state.gameState[this.state.gameState.length - 1]\n                    .currentBoard\n                }\n                evaluateGuess={(i, higherLowerOrSamesies) =>\n                  this.handleGuessAndManageState(i, higherLowerOrSamesies)\n                }\n                selectedBackground={this.state.selectedBackground}\n              />\n            </div>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nGame.propTypes = {\n  gameNumber: PropTypes.number.isRequired,\n};\n\nexport default Game;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Link } from \"react-router-dom\";\n\nconst LandingPageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  flex-direction: column;\n  button {\n    width: 300px;\n    height: 40px;\n    background-color: #cc9900;\n    color: white;\n  }\n`;\n\nconst LandingPage = () => {\n  return (\n    <LandingPageWrapper>\n      <h2>The Box Game</h2>\n      <img\n        src={process.env.PUBLIC_URL + \"/box-game-logo.png\"}\n        width=\"150\"\n        height=\"150\"\n        alt=\"The Box Game\"\n      />\n      <br />\n      <div>\n        <Link to=\"/single-player\">\n          <button>Single Player</button>\n        </Link>\n\n        <br />\n        <br />\n        <Link to=\"/multiplayer/1\">\n          <button>Multiplayer Room #1</button>\n        </Link>\n      </div>\n    </LandingPageWrapper>\n  );\n};\n\nexport default LandingPage;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  HashRouter,\n  IndexRoute,\n} from \"react-router-dom\";\nimport TestSocket from \"./components/TestingSocket\";\nimport Multiplayer from \"./components/Multiplayer\";\n// import Multiplayer2 from './components/Multiplayer2';\n// import Multiplayer3 from './components/Multiplayer3';\nimport { Game } from \"./components/\";\nimport { LandingPage } from \"./pages/\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  /* <Router history = {browserHistory}> */\n  <HashRouter basename=\"/\">\n    <Route exact path=\"/\" component={LandingPage} />\n    <Route exact path=\"/single-player\" component={Game} />\n    {/* <IndexRoute component = {Game} /> */}\n    {/* <Route exact path='/testing' component={TestSocket} /> */}\n    {/* <Route exact path='/multiplayer/1' component={Multiplayer1} /> */}\n    {/* <Route exact path='/multiplayer/2' component={Multiplayer2} />\n      <Route exact path='/multiplayer/3' component={Multiplayer3} /> */}\n    <Route\n      exact\n      path=\"/multiplayer/1\"\n      render={(props) => <Multiplayer gameNumber={1} {...props} />}\n    />\n    <Route\n      exact\n      path=\"/multiplayer/2\"\n      render={(props) => <Multiplayer gameNumber={2} {...props} />}\n    />\n    <Route\n      exact\n      path=\"/multiplayer/3\"\n      render={(props) => <Multiplayer gameNumber={3} {...props} />}\n    />\n    {/* <Route path = \"about\" component = {About} />\n       <Route path = \"contact\" component = {Contact} /> */}\n    {/* </Route> */}\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}